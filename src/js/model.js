import { async } from "regenerator-runtime";
import { API_URL, RES_PER_PAGE, KEY } from "./config.js";
import { AJAX } from "./helpers.js";

export const state = {
  recipe: {},
  search: {
    query: "",
    results: [],
    page: 1,
    resultsPerPage: RES_PER_PAGE,
  },
  bookmarks: [],
};

const createRecipeObject = function (data) {
  const { recipe } = data.data; //—Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ let recipe = data.data.recipe
  return {
    id: recipe.id,
    title: recipe.title,
    publisher: recipe.publisher,
    sourceUrl: recipe.source_url,
    image: recipe.image_url,
    servings: recipe.servings,
    cookingTime: recipe.cooking_time,
    ingredients: recipe.ingredients,
    ...(recipe.key && { key: recipe.key }), //–∫–ª–∞—Å—Å–Ω—ã–π —Å–ø–æ—Å–æ–±, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –≤ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ –≤–æ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–∞—Ö. –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –Ω–∞–º–∏ —Ä–µ—Ü–µ–ø—Ç–µ
  };
};

export const loadRecipe = async function (id) {
  //—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—à –æ–±—ä–µ–∫—Ç state.recipe —Å–≤–µ—Ä—Ö—É

  try {
    const data = await AJAX(`${API_URL}${id}?key=${KEY}`);
    state.recipe = createRecipeObject(data);

    if (state.bookmarks.some((bookmark) => bookmark.id === id))
      state.recipe.bookmarked = true;
    else state.recipe.bookmarked = false;
  } catch (err) {
    //Temp error handling
    console.error(`${err} üí•üí•üí•`);
    throw err; //–ø–µ—Ä–µ–∫–∏–¥—ã–≤–µ–º –æ—à–∏–±–∫—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω–∞ —Å–ª–æ–≤–∏–ª–∞—Å—å –≤ controller.js
  }
};

export const loadSearchResults = async function (query) {
  try {
    state.search.query = query;

    const data = await AJAX(`${API_URL}?search=${query}&key=${KEY}`);

    state.search.results = data.data.recipes.map((rec) => {
      //–ø–æ–ª—É—á–∏–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
      return {
        id: rec.id,
        title: rec.title,
        publisher: rec.publisher,
        image: rec.image_url,
        ...(rec.key && { key: rec.key }),
      };
    });
    state.search.page = 1; //–ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞, —Ä–µ—Ü–µ–ø—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –±–µ–∑ —ç—Ç–æ–π —Å—Ç–æ—á–∫–∏, –æ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –Ω–∞ —Ç–æ–π —Å—Ç—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
  } catch {
    console.error(`${err} üí•üí•üí•`);
    throw err; //–ø–µ—Ä–µ–∫–∏–¥—ã–≤–µ–º –æ—à–∏–±–∫—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω–∞ —Å–ª–æ–≤–∏–ª–∞—Å—å –≤ controller.js
  }
};

export const getSearchResultsPage = function (page = state.search.page) {
  state.search.page = page;

  const start = (page - 1) * state.search.resultsPerPage; //0 //–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ—Ç—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ page = 2 –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å 10 –ø–æ 19 (—Ä–æ–≤–Ω–æ 10 —à—Ç—É–∫)
  const end = page * state.search.resultsPerPage; //9

  return state.search.results.slice(start, end);
};

export const updateServings = function (newServings) {
  state.recipe.ingredients.forEach((ing) => {
    ing.quantity = (ing.quantity * newServings) / state.recipe.servings; // newQuantity = oldQuantity * newServings / oldServings
  });

  state.recipe.servings = newServings;
};

const persistBookmarks = function () {
  //—Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–æ–∫ –≤ local storage
  localStorage.setItem("bookmarks", JSON.stringify(state.bookmarks)); //localStorage –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ Application
};

export const addBookmark = function (recipe) {
  // Add bookmark
  state.bookmarks.push(recipe);

  // Mark current recipe as bookmarked
  if (recipe.id === state.recipe.id) state.recipe.bookmarked = true; //–¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç—É, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–∏

  persistBookmarks();
};

export const deleteBookmark = function (id) {
  // Delete bookmark
  const index = state.bookmarks.findIndex((el) => el.id === id);
  state.bookmarks.splice(index, 1);

  // Mark current recipe as NOT bookmarked
  if (id === state.recipe.id) state.recipe.bookmarked = false;

  persistBookmarks();
};

const init = function () {
  //—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç bookmarks –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const storage = localStorage.getItem("bookmarks");

  if (storage) state.bookmarks = JSON.parse(storage);
};
init();

const clearBookmarks = function () {
  localStorage.clear("bookmarks");
};
//clearBookmarks();

export const uploadRecipe = async function (newRecipe) {
  try {
    const ingredients = Object.entries(newRecipe)
      .filter(
        //—Å–æ–∑–¥–∞–¥–∏–º –∏–∑ –Ω–∞—à–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ –º–∞—Å—Å–∏–≤–æ–≤ —Å –Ω–æ–≤—ã–º, —Å–æ–∑–¥–∞–Ω–Ω—ã–º –Ω–∞–º–∏ —Ä–µ—Ü–µ–ø—Ç–æ–º –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—á–ª–µ–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        (entry) => entry[0].startsWith("ingredient") && entry[1] !== ""
      )
      .map((ing) => {
        const ingArr = ing[1].split(",").map((el) => el.trim());
        //const ingArr = ing[1].replaceAll(" ", "").split(",");

        if (ingArr.length !== 3)
          throw new Error(
            "Wrong ingredient format! Please use the correct format."
          );

        const [quantity, unit, description] = ingArr;

        return { quantity: quantity ? +quantity : null, unit, description }; //quantity: quantity ? +quantity : null - –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —á–∏—Å–ª–æ, –∞ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç –∫–∞–∫ —Ç–∞–∫–æ–≤–æ–π (—Ç.–µ. ""), —Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º null
      });

    const recipe = {
      //—Å–æ–∑–¥–∞–µ–º —Ç–∞–∫–æ–π –∂–µ –º–∞—Å—Å–∏–≤ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ —Å API, —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ API –∏ –æ–Ω —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª—Å—è —É –Ω–∞—Å –≤ –Ω–æ–≤—ã–π –Ω–∞—à —Ä–µ—Ü–µ–ø—Ç
      title: newRecipe.title,
      source_url: newRecipe.sourceUrl,
      image_url: newRecipe.image,
      publisher: newRecipe.publisher,
      cooking_time: +newRecipe.cookingTime,
      servings: +newRecipe.servings,
      ingredients,
    };

    const data = await AJAX(`${API_URL}?key=${KEY}`, recipe);
    state.recipe = createRecipeObject(data);
    addBookmark(state.recipe);
  } catch (err) {
    throw err;
  }
};
